# already exist in cloud:
dira/oldfile.txt
# then we add a file
touch dira/newfile.txt
ls dira
    -dira/oldfile.txt
    -dira/newfile.txt
# now one file is in file_cache, another is not
cloud goes down
touch dira/localOnly.txt
mv dira dirb    - async map RenameDir dira -> dirb
filecache async thread should service operation quickly (even in cloud outage)
    -stuck trying the createFile because cloud is down and never successfully iterates
        - it is at the attribute cache level where the rename actually happens
#assume error above gets fixed
ls dira
attribute_cache returns an ENOENT error because dira no longer exists
filecache invalidates dira, but does not delete it.
Presented with empty folder, but not an ENOENT error because filecache still thinks the folder exists
# ls dira not correct, it's not really getting deleted
ls dirb
attribute_cache returns 
    -dirb/oldfile.txt
    -dirb/newfile.txt
    -dirb/localOnly.txt
filecache has async_map rename from dira -> dirb
filecache storage has nothing valid for dirb
# correct so far
mkdir dira
attribute_cache does not know that it exists
ls dira
attribute_cache finds dira cached, lists nothing
FC does not know about new dira existence, so data only comes from attribute cache
# host is happy again
touch dira/newerfile.txt
ls dira
attribute_cache gets updated with newerfile.txt
file_cache also gets updated with newerfile.txt
async map clears those due to rename
FC merges local cache: dira/newerfile.txt
# host is happy
cloud
dira/oldfile.txt
dira/newfile.txt
AC
dira/oldfile.txt
dira/newfile.txt
FC
# code changes: rename local directories
# implement CreateDir to create a local directory and intercept AC responses
dirb/newfile.txt
dirb/localOnly.txt
dira/newerfile.txt
async
# code changes: mask listings with map data
# rename directory affects all its children in the async map
dira -> dirb
CreateFile dira/newerfile.txt
CreateFile dirb/localOnly.txt
host expects
dira/newerfile.txt
dirb/oldfile.txt
dirb/newfile.txt
dirb/localOnly.txt