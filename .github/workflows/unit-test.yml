name: Unit-Tests
permissions: {}

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:
    inputs:
      manual:
        description: "Manual Run"
        type: boolean
        required: true
        default: true

jobs:
  linux-unit-test:
    name: Build and Test on Linux
    strategy:
      matrix:
        job_name: ["linux-fuse3", "linux-fuse2", "linux-fuse3-arm", "linux-fuse2-arm"]
        include:
          - job_name: linux-fuse3
            os: ubuntu-latest
            fuselib: libfuse3-dev
          - job_name: linux-fuse2
            os: ubuntu-latest
            fuselib: libfuse-dev
          - job_name: linux-fuse3-arm
            os: ubuntu-24.04-arm
            fuselib: libfuse3-dev
          - job_name: linux-fuse2-arm
            os: ubuntu-24.04-arm
            fuselib: libfuse-dev

    runs-on: ${{ matrix.os }}
    env:
      cgo: "1"
      go: "1.24"
      zig: 0.14.0
      containerName: "test-cnt-ubn"

      AWS_ENDPOINT: http://localhost:4566
      AWS_REGION: us-east-1
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
      AWS_BUCKET_NAME: test
      # Using default test credentials for Azurite
      BLOB_ENDPOINT: http://127.0.0.1:10000/devstoreaccount1
      BLOB_ACCOUNT: devstoreaccount1
      BLOB_KEY: Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          persist-credentials: false

      - name: Install Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
        with:
          go-version: ${{ env.go }}
          check-latest: true
      - run: go version

      - name: Install Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5
        with:
          python-version: "3.10"

      - name: Install Zig
        run: |
          if [[ "${{ runner.arch }}" == "X64" ]]; then
            ZIG_ARCH="x86_64"
          elif [[ "${{ runner.arch }}" == "ARM64" ]]; then
            ZIG_ARCH="aarch64"
          else
            echo "Unsupported architecture: ${{ runner.arch }}"
            exit 1
          fi

          ZIG_DIR="zig-linux-${ZIG_ARCH}-${{ env.zig }}"
          ZIG_TARBALL="${ZIG_DIR}.tar.xz"
          curl -L https://ziglang.org/download/${{ env.zig }}/${ZIG_TARBALL} -o zig.tar.xz
          mkdir -p $HOME/.local/bin
          tar -xf zig.tar.xz -C $HOME/.local/bin
          echo "$HOME/.local/bin/${ZIG_DIR}" >> $GITHUB_PATH
          rm zig.tar.xz

      - name: Set CGO
        shell: bash
        run: |
          if [[ "${{ env.cgo }}" != "" ]]; then echo 'CGO_ENABLED=${{ env.cgo }}' >> $GITHUB_ENV ; fi

      - name: Install libfuse on Linux
        shell: bash
        run: |
          sudo apt-get update && sudo apt-get install -y pkg-config fuse3 ${{ matrix.fuselib }}
          if [[ "${{ matrix.job_name }}" == "linux-fuse2" ]] || "${{ matrix.job_name }}" == "linux-fuse2-arm" ]]; then
            sudo apt-get install -y libfuse-dev;
          fi

      - name: Setup CGO environment for Zig
        shell: bash
        run: |
          if [[ "${{ matrix.job_name }}" == "linux-fuse2" || "${{ matrix.job_name }}" == "linux-fuse2-arm" ]]; then
            echo "Using FUSE2 (${{ matrix.fuselib }})"
            PKG_CONFIG_CFLAGS=$(pkg-config fuse --cflags)
            PKG_CONFIG_LDFLAGS=$(pkg-config fuse --libs)
            echo "pkg-config fuse --cflags: $PKG_CONFIG_CFLAGS"
            echo "pkg-config fuse --libs: $PKG_CONFIG_LDFLAGS"
            echo "CGO_CFLAGS=$PKG_CONFIG_CFLAGS $CGO_EXTRA_CFLAGS" >> $GITHUB_ENV
            echo "CGO_LDFLAGS=$PKG_CONFIG_LDFLAGS" >> $GITHUB_ENV
          else # FUSE3
            echo "Using FUSE3 (${{ matrix.fuselib }})"
            PKG_CONFIG_CFLAGS=$(pkg-config fuse3 --cflags)
            PKG_CONFIG_LDFLAGS=$(pkg-config fuse3 --libs)
            echo "pkg-config fuse3 --cflags: $PKG_CONFIG_CFLAGS"
            echo "pkg-config fuse3 --libs: $PKG_CONFIG_LDFLAGS"
            echo "CGO_CFLAGS=$PKG_CONFIG_CFLAGS $CGO_EXTRA_CFLAGS" >> $GITHUB_ENV
            echo "CGO_LDFLAGS=$PKG_CONFIG_LDFLAGS" >> $GITHUB_ENV
          fi
          echo "CGO environment variables set."
          echo "--- Current CGO Environment ---"
          echo "CGO_ENABLED=${CGO_ENABLED}"
          echo "CC=${CC}"
          echo "CXX=${CXX}"
          echo "CGO_CFLAGS=${CGO_CFLAGS}"
          echo "CGO_LDFLAGS=${CGO_LDFLAGS}"
          echo "-------------------------------"

      - name: Build
        run: |
          if [[ "${{ matrix.job_name }}" == "linux-fuse2" ]] || "${{ matrix.job_name }}" == "linux-fuse2-arm" ]]; then
            ./build.sh fuse2;
          else
            ./build.sh;
          fi

      - name: Create Azure Configuration File on Linux
        run: |-
          cnfFile=$HOME/azuretest.json
          echo $cnfFile
          touch $cnfFile
          echo "{" > $cnfFile
          echo "\"block-acct\"": "\"${{ env.BLOB_ACCOUNT }}\"", >> $cnfFile
          echo "\"block-key\"": "\"${{ env.BLOB_KEY }}\"", >> $cnfFile
          echo "\"endpoint\"": "\"${{ env.BLOB_ENDPOINT }}\"", >> $cnfFile
          echo "\"skip-msi\"": "true", >> $cnfFile
          echo "\"skip-azcli\"": "true", >> $cnfFile
          echo "\"proxy-address\"": "\"\"" >> $cnfFile
          echo "}" >> $cnfFile

      - name: Create S3 Configuration File on Linux
        run: |-
          cnfFile=$HOME/s3test.json
          echo $cnfFile
          touch $cnfFile
          echo "{" > $cnfFile
          echo "\"bucket-name\"": "\"${{ env.AWS_BUCKET_NAME }}\"", >> $cnfFile
          echo "\"access-key\"": "\"${{ env.AWS_ACCESS_KEY_ID }}\"", >> $cnfFile
          echo "\"secret-key\"": "\"${{ env.AWS_SECRET_ACCESS_KEY }}\"", >> $cnfFile
          echo "\"endpoint\"": "\"${{ env.AWS_ENDPOINT }}\"", >> $cnfFile
          echo "\"region\"": "\"${{ env.AWS_REGION }}\"", >> $cnfFile
          echo "\"use-path-style\"": true\ >> $cnfFile
          echo "}" >> $cnfFile

      - name: Start LocalStack
        run: |
          pip install localstack awscli-local[ver1] # install LocalStack cli and awslocal
          docker pull localstack/localstack         # Make sure to pull the latest version of the image
          localstack start -d                       # Start LocalStack in the background

          echo "Waiting for LocalStack startup..."  # Wait 20 seconds for the LocalStack container
          localstack wait -t 20                     # to become ready before timing out
          echo "Startup complete"

      - name: Install Azurite
        run: npm install -g azurite

      - name: Start Azurite
        run: azurite --silent &

      - name: Run some Tests against LocalStack
        run: |
          awslocal s3 mb s3://test
          awslocal s3 ls

      - name: Run unit tests
        run: |
          if [[ "$OSTYPE" == "linux-gnu"* ]]; then
            # Set Zig as the C/C++ compiler for CGO during tests
            if [[ "${{ runner.arch }}" == "X64" ]]; then
              ZIG_TARGET="x86_64-linux-gnu"
              LIBDIR="/usr/lib/x86_64-linux-gnu"
            elif [[ "${{ runner.arch }}" == "ARM64" ]]; then
              ZIG_TARGET="aarch64-linux-gnu"
              LIBDIR="/usr/lib/aarch64-linux-gnu"
            fi
            export CC="zig cc -target $ZIG_TARGET"
            export CXX="zig c++ -target $ZIG_TARGET"
            echo "CC=zig cc -target $ZIG_TARGET" >> $GITHUB_ENV
            echo "CXX=zig c++ -target $ZIG_TARGET" >> $GITHUB_ENV
            export CGO_LDFLAGS="-L$LIBDIR"
          fi

          if [ "${{ matrix.job_name }}" == "linux-fuse2" ] || "${{ matrix.job_name }}" == "linux-fuse2-arm" ]]; then
            go test -v -timeout=1h ./... --tags=unittest,azurite
          else
            go test -v -timeout=1h ./... --tags=unittest,azurite,fuse3
          fi
          echo "CGO environment variables set."
          echo "--- Current CGO Environment ---"
          echo "CGO_ENABLED=${CGO_ENABLED}"
          echo "CC=${CC}"
          echo "CXX=${CXX}"
          echo "CGO_CFLAGS=${CGO_CFLAGS}"
          echo "CGO_LDFLAGS=${CGO_LDFLAGS}"
          echo "-------------------------------"

  test:
    name: Build and Test on Windows
    strategy:
      matrix:
        os: ["windows-latest", "windows-11-arm"]
    
    runs-on: ${{ matrix.os }}
    env:
      go: "1.24"
      cgo: "0"
      zig: 0.14.0
      containerName: "test-cnt-win"

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          persist-credentials: false

      - name: Install Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
        with:
          go-version: ${{ env.go }}
          check-latest: true
      - run: go version

      - name: Install Zig
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $zigVersion = "${{ env.zig }}"
          $zigUrl = "https://ziglang.org/download/$zigVersion/zig-windows-x86_64-$zigVersion.zip"
          $zigZip = "$env:TEMP\zig.zip"
          Invoke-WebRequest -Uri $zigUrl -OutFile $zigZip
          Expand-Archive -Path $zigZip -DestinationPath $env:USERPROFILE\zig
          echo "$env:USERPROFILE\zig\zig-windows-x86_64-$zigVersion" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          Remove-Item $zigZip

      - name: Set CGO
        shell: bash
        run: |
          if [[ "${{ env.cgo }}" != "" ]]; then echo 'CGO_ENABLED=${{ env.cgo }}' >> $GITHUB_ENV ; fi

      - name: Build
        shell: bash
        run: |
          ./build.sh

      - name: Run unit tests
        run: go test -v -timeout=1h ./... --tags=unittest,authtest

  lint:
    name: Lint
    runs-on: ubuntu-latest
    env:
      go: "1.24"
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          persist-credentials: false

      - name: Install Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
        with:
          go-version: ${{ env.go }}
          check-latest: true
      - run: go version

      - name: Set CGO
        shell: bash
        run: |
          if [[ "${{ env.go }}" != "" ]]; then echo 'CGO_ENABLED=${{ env.go }}' >> $GITHUB_ENV ; fi

      - name: Install libfuse on Linux
        shell: bash
        run: |
          sudo apt-get install fuse3 libfuse3-dev libfuse-dev

      - name: golangci-lint
        uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v7
        with:
          version: latest
          args: --tests=false --timeout=5m

      - name: Notice file check
        run: |
          ./scripts/notices_fix.sh
          result=$(git diff NOTICE | wc -l)
          if [ $result -ne 0 ]; then
            echo "Notices needs a fix. Run ./scripts/notices_fix.sh and commit NOTICE file."
            exit 1
          else
            echo "Notices are up to date."
          fi
