name: Test Windows Installer Signing
on:
  push:
    branches: sign-windows-installer
  workflow_dispatch:

jobs:
  compile-gui:
    # Compile the GUI on Windows & Linux, and write the GUI binaries to actions/cache
    name: Compile GUI
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      -
        name: Checkout code
        uses: actions/checkout@v4
      -
        name: Fetch cached compiled GUI
        id: restore-compiled-gui
        uses: actions/cache/restore@v3
        with:
          # enableCrossOsArchive always needs to be set on cached items in Windows jobs
          # see cache documentation: https://github.com/actions/cache#inputs
          enableCrossOsArchive: true
          path: gui/dist/cloudfuseGUI_${{ runner.os }}
          key: ${{ runner.os }}-compiled-gui-${{ hashFiles('gui/*.ui', 'gui/*.py') }}
      -
        name: Install Python
        if: ${{ ! steps.restore-compiled-gui.outputs.cache-hit }}
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      -
        name: Install pip dependencies
        if: ${{ ! steps.restore-compiled-gui.outputs.cache-hit }}
        run: pip3 install -r gui/requirements.txt
        shell: bash
      -
        name: Compile GUI
        if: ${{ ! steps.restore-compiled-gui.outputs.cache-hit }}
        shell: bash
        run: |
          cd gui
          ./create_gui.sh
          mv dist/cloudfuseGUI dist/cloudfuseGUI_${{ runner.os }}
      -
        name: Cache compiled GUI
        if: ${{ ! steps.restore-compiled-gui.outputs.cache-hit }}
        uses: actions/cache/save@v3
        with:
          enableCrossOsArchive: true
          path: gui/dist/cloudfuseGUI_${{ runner.os }}
          key: ${{ runner.os }}-compiled-gui-${{ hashFiles('gui/*.ui', 'gui/*.py') }}

  create-installer:
    # Run Inno Setup to create the Windows app installer, then write it to actions/cache
    name: Create Windows Installer
    needs: compile-gui
    runs-on: windows-latest
    env:
      go: '1.21'
      cgo: '0'
      winfsp: winfsp-2.0.23075.msi
    steps:
      - # Build the command-line program
        name: Checkout code
        uses: actions/checkout@v4
      -
        name: Fetch cached build
        id: restore-compiled-build
        uses: actions/cache/restore@v3
        with:
          # enableCrossOsArchive always needs to be set on cached items in Windows jobs
          # see cache documentation: https://github.com/actions/cache#inputs
          enableCrossOsArchive: true
          path: |
            cloudfuse.exe
            cfusemon.exe
            windows-startup.exe
          key: test-installer-signature-cached-build
      -
        name: Install Go
        if: ${{ ! steps.restore-compiled-build.outputs.cache-hit }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.go }}
          check-latest: true
      -
        name: Set CGO
        if: ${{ ! steps.restore-compiled-build.outputs.cache-hit }}
        shell: bash
        run: |
          if [[ "${{ env.cgo }}" != "" ]]; then echo 'CGO_ENABLED=${{ env.cgo }}' >> $GITHUB_ENV ; fi
      -
        name: Build
        if: ${{ ! steps.restore-compiled-build.outputs.cache-hit }}
        shell: bash
        run: |
          commitDate=$(git log -1 --format=%cd --date=format:%Y-%m-%dT%H:%M:%S)
          ldflags="-s -w -X main.version=${{ github.ref_name }} -X main.commit=${{ github.sha }} -X main.date=$commitDate"
          go build -trimpath -ldflags ''"$ldflags"'' -o cloudfuse.exe
          go build -trimpath -ldflags ''"$ldflags"'' -o cfusemon.exe ./tools/health-monitor/
          go build -trimpath -ldflags ''"$ldflags"'' -o windows-startup.exe ./tools/windows-startup/
          touch -m -d $commitDate cloudfuse.exe
          touch -m -d $commitDate cfusemon.exe
          touch -m -d $commitDate windows-startup.exe
      -
        name: Cache compiled GUI
        if: ${{ ! steps.restore-compiled-build.outputs.cache-hit }}
        uses: actions/cache/save@v3
        with:
          enableCrossOsArchive: true
          path: |
            cloudfuse.exe
            cfusemon.exe
            windows-startup.exe
          key: test-installer-signature-cached-build
      - # Get the WinFSP installer (from cache or download)
        name: Get cached WinFSP installer
        id: restore-winfsp-installer
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.winfsp }}
          key: ${{ env.winfsp }}
      -
        name: Download WinFSP installer
        if: ${{ ! steps.restore-winfsp-installer.outputs.cache-hit }}
        shell: bash
        run: |
          curl -LOf https://github.com/winfsp/winfsp/releases/download/v2.0/${{ env.winfsp }}
      -
        name: Cache WinFSP installer
        if: ${{ ! steps.restore-winfsp-installer.outputs.cache-hit }}
        uses: actions/cache/save@v3
        with:
          path: ${{ env.winfsp }}
          key: ${{ env.winfsp }}
      -
        name: Fetch cached compiled GUI
        uses: actions/cache/restore@v3
        with:
          enableCrossOsArchive: true
          path: gui/dist/cloudfuseGUI_${{ runner.os }}
          key: ${{ runner.os }}-compiled-gui-${{ hashFiles('gui/*.ui', 'gui/*.py') }}
          fail-on-cache-miss: true
        # don't continue if we fail get the compiled GUI for the Windows installer
        continue-on-error: false
      - # Build the installer and save it to actions/cache
        name: Create PFX KeyCert File
        shell: bash
        run: |
          cd build
          echo "${{ secrets.INSTALLER_SIGNATURE_PRIVATE_KEY }}" >> combined.pem
          cat codeSigning.crt >> combined.pem
          cat combined.pem | openssl pkcs12 -export -out signingKey.pfx -passout pass:
          rm combined.pem
          cd ..
      -
        name: Prep Inno Setup Script
        shell: bash
        run: |
          printf '%s' >build/run-iscc.bat \
            '"C:/Program Files (x86)/Inno Setup 6/iscc.exe" ' \
            "'" \
            '/Ssigntool=$qC:\Program Files (x86)\Windows Kits\10\App Certification Kit\signtool.exe$q ' \
            'sign /fd SHA256 /a /f $q${{ github.workspace }}\build\appSigningCert.pfx$q ' \
            '/n $qSEAGATE TECHNOLOGY LLC$q /t http://timestamp.digicert.com $p' \
            "' " \
            "build/windows_installer_build.iss"
          cat build/run-iscc.bat
      -
        name: Run Inno Setup
        # Inno Setup is pre-installed on GitHub's windows-latest image
        # see documentation: https://github.com/actions/runner-images/blob/main/images/windows/Windows2022-Readme.md
        run: |
          cd build
          .\run-iscc.bat
      -
        name: Rename installer
        run: |
          mv build/Output/cloudfuse.exe build/Output/cloudfuse_install_Windows_x86_64.exe
      -
        name: Cache windows installer
        uses: actions/cache/save@v3
        with:
          enableCrossOsArchive: true
          path: build/Output/cloudfuse_install_Windows_x86_64.exe
          key: windows-cloudfuse-installer-${{ github.sha }}
