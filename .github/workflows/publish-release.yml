name: Release binaries
permissions: {}

on:
  push:
    tags:
      - "v*"

jobs:
  create-installer:
    # Run Inno Setup to create the Windows app installer, then write it to actions/cache
    name: Create Windows Installer
    runs-on: windows-latest
    env:
      go: "1.24"
      cgo: "0"
      winfsp: winfsp-2.1.25156.msi
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          persist-credentials: false

      - name: Install Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
        with:
          go-version: ${{ env.go }}
          check-latest: true
          cache: false

      - name: Set CGO
        shell: bash
        run: |
          if [[ "${{ env.cgo }}" != "" ]]; then echo 'CGO_ENABLED=${{ env.cgo }}' >> $GITHUB_ENV ; fi

      - name: Build
        shell: bash
        run: |
          commitDate=$(TZ=UTC0 git log -1 --format=%cd --date=format-local:%Y-%m-%dT%H:%M:%SZ)
          ldflags="-s -w -X github.com/Seagate/cloudfuse/common.GitCommit=${{ github.sha }} -X github.com/Seagate/cloudfuse/common.CommitDate=$commitDate"
          go build -trimpath -ldflags ''"$ldflags"'' -o cloudfuse.exe
          go build -trimpath -ldflags ''"$ldflags"'' -o cfusemon.exe ./tools/health-monitor/
          go build -trimpath -ldflags ''"$ldflags"'' -o windows-startup.exe ./tools/windows-startup/
          go build -trimpath -ldflags ''"$ldflags"'' -o windows-service.exe ./tools/windows-service/
          touch -m -d $commitDate cloudfuse.exe
          touch -m -d $commitDate cfusemon.exe
          touch -m -d $commitDate windows-startup.
          touch -m -d $commitDate windows-service.exe

        # Get the WinFSP installer (from cache or download)
      - name: Get cached WinFSP installer
        id: restore-winfsp-installer
        uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # v4
        with:
          path: ${{ env.winfsp }}
          key: ${{ env.winfsp }}

      - name: Download WinFSP installer
        if: ${{ ! steps.restore-winfsp-installer.outputs.cache-hit }}
        shell: bash
        run: |
          curl -LOf https://github.com/winfsp/winfsp/releases/download/v2.1/${{ env.winfsp }}
      - name: Cache WinFSP installer
        if: ${{ ! steps.restore-winfsp-installer.outputs.cache-hit }}
        uses: actions/cache/save@5a3ec84eff668545956fd18022155c47e93e2684 # v4
        with:
          path: ${{ env.winfsp }}
          key: ${{ env.winfsp }}

      - name: Set Version
        id: get_version
        shell: bash
        run: echo "VERSION=${REF_NAME#v}" >> $GITHUB_OUTPUT
        env:
          REF_NAME: ${{ github.ref_name }}

      - name: Run Inno Setup
        # Build the installer and save it to actions/cache
        working-directory: ./build
        shell: bash
        # Inno Setup is pre-installed on GitHub's windows-latest image
        # see documentation: https://github.com/actions/runner-images/blob/main/images/windows/Windows2022-Readme.md
        run: |
          "C:/Program Files (x86)/Inno Setup 6/iscc.exe" windows_installer_build.iss

      - name: Rename installer
        run: |
          mv build/Output/cloudfuse.exe build/Output/cloudfuse_${{ steps.get_version.outputs.VERSION }}_windows_amd64.exe

      - name: Cache windows installer
        uses: actions/cache/save@5a3ec84eff668545956fd18022155c47e93e2684 # v4
        with:
          enableCrossOsArchive: true
          path: build/Output/cloudfuse_${{ steps.get_version.outputs.VERSION }}_windows_amd64.exe
          key: windows-cloudfuse-installer-${{ github.sha }}

  release:
    # Use GoReleaser to package and publish Linux releases along with the Windows installer
    name: Release Binaries
    needs: create-installer
    runs-on: ubuntu-latest
    env:
      go: "1.24"
      zig: 0.14.1
    permissions:
      contents: write
      id-token: write

    steps:
      # libfuse-dev is required to build our command-line program and enable GoReleaser to build for ARM64
      - name: Install Libfuse
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu libfuse-dev
      # Get code and Go ready
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Install Zig
        run: |
          curl -L https://ziglang.org/download/${{ env.zig }}/zig-x86_64-linux-${{ env.zig }}.tar.xz -o zig.tar.xz
          mkdir -p $HOME/.local/bin
          tar -xf zig.tar.xz -C $HOME/.local/bin
          echo "$HOME/.local/bin/zig-x86_64-linux-${{ env.zig }}" >> $GITHUB_PATH
          rm zig.tar.xz

      - name: Install Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
        with:
          go-version: ${{ env.go }}
          check-latest: true
          cache: false

      - name: Set up Cosign
        uses: sigstore/cosign-installer@3454372f43399081ed03b604cb2d021dabca52bb # v3.8.2

      - name: Set Version
        id: get_version
        run: echo "VERSION=${REF_NAME#v}" >> $GITHUB_OUTPUT
        env:
          REF_NAME: ${{ github.ref_name }}

        # Get cached intermediate build products
      - name: Restore cached Windows installer
        uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # v4
        with:
          enableCrossOsArchive: true
          path: build/Output/cloudfuse_${{ steps.get_version.outputs.VERSION }}_windows_amd64.exe
          key: windows-cloudfuse-installer-${{ github.sha }}
          fail-on-cache-miss: true

        # Run GoReleaser (see .goreleaser.yaml)
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@9c156ee8a17a598857849441385a2041ef570552 # v6
        with:
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-package-repos:
    name: Update APT & RPM Repositories
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y createrepo-c

      - name: Checkout gh-pages branch
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: gh-pages
          path: gh-pages
          persist-credentials: true

      - name: Download .deb and .rpm packages from release
        env:
          GH_TOKEN: ${{ github.token }}
          TAG: ${{ github.ref_name }}
        run: |
          mkdir ./packages
          gh release download $TAG --dir ./packages -p "*.deb"
          gh release download $TAG --dir ./packages -p "*.rpm"

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@e89d40939c28e39f97cf32126055eeae86ba74ec # v6.3.0
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          
      - name: Update APT repository
        working-directory: ./gh-pages
        run: |
          # Move new .deb files into the repository
          find ../packages -name "*_amd64.deb" -exec mv {} dists/stable/main/binary-amd64/ \;
          find ../packages -name "*_arm64.deb" -exec mv {} dists/stable/main/binary-arm64/ \;
          # Generate Packages metadata
          apt-ftparchive packages dists/stable/main/binary-amd64 > dists/stable/main/binary-amd64/Packages
          gzip -k -f dists/stable/main/binary-amd64/Packages
          apt-ftparchive packages dists/stable/main/binary-arm64 > dists/stable/main/binary-arm64/Packages
          gzip -k -f dists/stable/main/binary-arm64/Packages
          # Generate and sign the Release file
          apt-ftparchive \
            -o APT::FTPArchive::Release::Origin="Seagate Technology" \
            -o APT::FTPArchive::Release::Label="cloudfuse" \
            -o APT::FTPArchive::Release::Suite="stable" \
            -o APT::FTPArchive::Release::Codename="stable" \
            -o APT::FTPArchive::Release::Architectures="amd64 arm64" \
            -o APT::FTPArchive::Release::Components="main" \
            -o APT::FTPArchive::Release::Description="APT repository for cloudfuse" \
            release dists/stable > dists/stable/Release
          gpg --clearsign -u "${{ steps.import_gpg.outputs.fingerprint }}" --batch --pinentry-mode loopback --passphrase "${{ secrets.GPG_PASSPHRASE }}" -o dists/stable/InRelease dists/stable/Release
          gpg -u "${{ steps.import_gpg.outputs.fingerprint }}" --batch --pinentry-mode loopback --passphrase "${{ secrets.GPG_PASSPHRASE }}" -abs -o dists/stable/Release.gpg dists/stable/Release

      - name: Update RPM repository
        working-directory: ./gh-pages
        run: |
          # Move new .rpm files
          find ../packages -name "*.rpm" -exec mv {} rpm/ \;
          # Create/update repository metadata
          createrepo_c --database rpm/
          # Sign the repository metadata
          gpg --detach-sign --armor -u "${{ steps.import_gpg.outputs.fingerprint }}" --batch --pinentry-mode loopback --passphrase "${{ secrets.GPG_PASSPHRASE }}" rpm/repodata/repomd.xml

      - name: Commit and push repository updates
        working-directory: ./gh-pages
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add .
          if git diff-index --quiet HEAD; then
            echo "No changes to commit."
          else
            git commit -m "Update APT & RPM repositories for release ${GITHUB_REF_NAME}"
            git push
          fi